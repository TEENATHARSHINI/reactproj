import { useState } from 'react';
import Header from './components/Header';
import CodeEditor from './components/CodeEditor';
import ReviewPanel from './components/ReviewPanel';
import { CodeReview, Language } from './types';

function App() {
  const [code, setCode] = useState<string>('');
  const [language, setLanguage] = useState<Language>('javascript');
  const [reviews, setReviews] = useState<CodeReview[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleCodeChange = (newCode: string) => {
    setCode(newCode);
  };

  const handleLanguageChange = (newLanguage: Language) => {
    setLanguage(newLanguage);
  };

  const handleReview = async () => {
    if (!code.trim()) {
      setError('Please enter some code to review');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // In a real app, this would be an API call to your backend
      // For now, we'll simulate a review
      const newReview: CodeReview = {
        id: Date.now().toString(),
        code,
        language,
        feedback: 'This is a simulated review. In a real implementation, this would be generated by an AI model.',
        suggestions: [
          'Consider adding error handling',
          'Add comments to explain complex logic',
          'Consider breaking this into smaller functions',
        ],
        timestamp: new Date().toISOString(),
      };

      setReviews(prev => [newReview, ...prev]);
    } catch (err) {
      setError('Failed to generate review. Please try again.');
      console.error('Review error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      <main className="flex-1 container mx-auto p-4 flex flex-col md:flex-row gap-6">
        <div className="w-full md:w-1/2">
          <CodeEditor 
            code={code}
            language={language}
            onCodeChange={handleCodeChange}
            onLanguageChange={handleLanguageChange}
            onReview={handleReview}
            isLoading={isLoading}
          />
          {error && (
            <div className="mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
              {error}
            </div>
          )}
        </div>
        
        <div className="w-full md:w-1/2">
          <ReviewPanel 
            reviews={reviews}
            isLoading={isLoading}
          />
        </div>
      </main>
    </div>
  );
}

export default App;
